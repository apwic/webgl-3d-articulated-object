const l = 0.5 / 2
const w = 0.4 / 2
const z = 0.2 / 2
const d = 0.07 / 2

var baseTriplePrism = [
    // vertical plane
    // 1. front side
    -w, -l, -d, w, -l, -d, w, -l + d, -d, -w, -l + d, -d,
    -w, l - d, -d, w, l - d, -d, w, l, -d, -w, l, -d,
    -w, -l, -d, -w + d, -l, -d, -w + d, l, -d, -w, l, -d,
    w, l, -d, w - d, l, -d, w - d, -l, -d, w, -l, -d,
    // 2. back side
    -w, -l, d, w, -l, d, w, -l + d, d, -w, -l + d, d,
    -w, l - d, d, w, l - d, d, w, l, d, -w, l, d,
    -w, -l, d, -w + d, -l, d, -w + d, l, d, -w, l, d,
    w, l, d, w - d, l, d, w - d, -l, d, w, -l, d,
    // 3. edge out side
    -w, -l, -d, w, -l, -d, w, -l, d, -w, -l, d,
    -w, l, d, w, l, d, w, l, -d, -w, l, -d,
    -w, -l, -d, -w, -l, d, -w, l, d, -w, l, -d,
    w, -l, -d, w, -l, d, w, l, d, w, l, -d,
    // 4. edge in side
    -w + d, -l + d, -d, w - d, -l + d, -d, w - d, -l + d, d, -w + d, -l + d, d,
    -w + d, l - d, d, w - d, l - d, d, w - d, l - d, -d, -w + d, l - d, -d,
    -w + d, -l + d, -d, -w + d, -l + d, d, -w + d, l - d, d, -w + d, l - d, -d,
    w - d, -l + d, -d, w - d, -l + d, d, w - d, l - d, d, w - d, l - d, -d
]

var baseNormalTriplePrism = [
    // vertical plane
    // 1. front side
    0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1,
    0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1,
    0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1,
    0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1,
    // 2. back side
    0, 0, -1, 0, 0, -1, 0, 0, -1, 0, 0, -1,
    0, 0, -1, 0, 0, -1, 0, 0, -1, 0, 0, -1,
    0, 0, -1, 0, 0, -1, 0, 0, -1, 0, 0, -1,
    0, 0, -1, 0, 0, -1, 0, 0, -1, 0, 0, -1,
    // 3. edge out side
    0, -1, 0, 0, -1, 0, 0, -1, 0, 0, -1, 0,
    0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0,
    -1, 0, 0, -1, 0, 0, -1, 0, 0, -1, 0, 0,
    1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0,
    // 4. edge in side
    0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0,
    0, -1, 0, 0, -1, 0, 0, -1, 0, 0, -1, 0,
    1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0,
    -1, 0, 0, -1, 0, 0, -1, 0, 0, -1, 0, 0,

    // Horizontal 1 plane
    
    // 1. front side
    1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0,
    1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0,
    1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0,
    1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0,
    -1, 0, 0, -1, 0, 0, -1, 0, 0, -1, 0, 0,
    -1, 0, 0, -1, 0, 0, -1, 0, 0, -1, 0, 0,
    -1, 0, 0, -1, 0, 0, -1, 0, 0, -1, 0, 0,
    -1, 0, 0, -1, 0, 0, -1, 0, 0, -1, 0, 0,
    // 2. back side
    // 3. edge out side
    0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1,
    0, 0, -1, 0, 0, -1, 0, 0, -1, 0, 0, -1,
    0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0,
    0, -1, 0, 0, -1, 0, 0, -1, 0, 0, -1, 0,
    // 4. edge in side
    0, 0, -1, 0, 0, -1, 0, 0, -1, 0, 0, -1,
    0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1,
    0, -1, 0, 0, -1, 0, 0, -1, 0, 0, -1, 0,
    0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0,

    // Horizontal 2 plane
    // 1. front side
    0, -1, 0, 0, -1, 0, 0, -1, 0, 0, -1, 0,
    0, -1, 0, 0, -1, 0, 0, -1, 0, 0, -1, 0,
    0, -1, 0, 0, -1, 0, 0, -1, 0, 0, -1, 0,
    0, -1, 0, 0, -1, 0, 0, -1, 0, 0, -1, 0,
    // 2. back side
    0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0,
    0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0,
    0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0,
    0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0,
    // 3. edge out side
    -1, 0, 0, -1, 0, 0, -1, 0, 0, -1, 0, 0,
    1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0,
    0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1,
    0, 0, -1, 0, 0, -1, 0, 0, -1, 0, 0, -1,
    // 4. edge in side
    1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0,
    -1, 0, 0, -1, 0, 0, -1, 0, 0, -1, 0, 0,
    0, 0, -1, 0, 0, -1, 0, 0, -1, 0, 0, -1,
    0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1,
]

var triplePrism = []
for (let i = 0; i < baseTriplePrism.length; i++) {
    triplePrism.push(baseTriplePrism[i])
}
var normalTriplePrism = []
for (let i = 0; i < baseNormalTriplePrism.length; i++) {
    normalTriplePrism.push(baseNormalTriplePrism[i])
}


// function generateTriplePrism() {
//     let rotatedTriplePrism1 = new Shape(baseTriplePrism, baseNormalTriplePrism, [0, 0, 1], gl.TRIANGLE_FAN)
//     rotatedTriplePrism1.rotateY(90)
//     rotatedTriplePrism1.rotateZ(90)

//     let rotatedTriplePrism2 = new Shape(baseTriplePrism, baseNormalTriplePrism, [0, 0, 1], gl.TRIANGLE_FAN)
//     rotatedTriplePrism2.rotateX(90)
//     rotatedTriplePrism2.rotateZ(90)

//     let vertices1 = rotatedTriplePrism1.getTransformedVertices()
//     let vertices2 = rotatedTriplePrism2.getTransformedVertices()

//     for (let i = 0; i < vertices1.length; i++) {
//         triplePrism.push(vertices1[i])
//     }
//     for (let i = 0; i < vertices2.length; i++) {
//         triplePrism.push(vertices2[i])
//     }
//     Shape.ID = 0
// }

// generateTriplePrism()

var baseBoxVertice = [
    //back face
    -0.2, -0.2, -0.2, 0.2, -0.2, -0.2, 0.2, -0.165, -0.2, -0.2, -0.165, -0.2,
    -0.2, 0.165, -0.2, 0.2, 0.165, -0.2, 0.2, 0.2, -0.2, -0.2, 0.2, -0.2,
    -0.2, -0.2, -0.2, -0.165, -0.2, -0.2, -0.165, 0.2, -0.2, -0.2, 0.2, -0.2,
    0.165, -0.2, -0.2, 0.2, -0.2, -0.2, 0.2, 0.2, -0.2, 0.165, 0.2, -0.2,

    //front face
    -0.2, -0.2, 0.2, 0.2, -0.2, 0.2, 0.2, -0.165, 0.2, -0.2, -0.165, 0.2,
    -0.2, 0.165, 0.2, 0.2, 0.165, 0.2, 0.2, 0.2, 0.2, -0.2, 0.2, 0.2,
    -0.2, -0.2, 0.2, -0.165, -0.2, 0.2, -0.165, 0.2, 0.2, -0.2, 0.2, 0.2,
    0.165, -0.2, 0.2, 0.2, -0.2, 0.2, 0.2, 0.2, 0.2, 0.165, 0.2, 0.2,

    //bottom face
    -0.2, -0.2, 0.2, -0.165, -0.2, 0.2, -0.165, -0.2, -0.2, -0.2, -0.2, -0.2,
    0.165, -0.2, 0.2, 0.2, -0.2, 0.2, 0.2, -0.2, -0.2, 0.165, -0.2, -0.2,
    -0.2, -0.2, 0.2, 0.2, -0.2, 0.2, 0.2, -0.2, 0.165, -0.2, -0.2, 0.165,
    -0.2, -0.2, -0.2, 0.2, -0.2, -0.2, 0.2, -0.2, -0.165, -0.2, -0.2, -0.165,

    //top face
    -0.2, 0.2, 0.2, -0.165, 0.2, 0.2, -0.165, 0.2, -0.2, -0.2, 0.2, -0.2,
    0.165, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, -0.2, 0.165, 0.2, -0.2,
    -0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.165, -0.2, 0.2, 0.165,
    -0.2, 0.2, -0.2, 0.2, 0.2, -0.2, 0.2, 0.2, -0.165, -0.2, 0.2, -0.165,


    //left face
    -0.2, -0.2, 0.2, -0.2, -0.2, 0.165, -0.2, 0.2, 0.165, -0.2, 0.2, 0.2,
    -0.2, -0.2, -0.2, -0.2, -0.2, -0.165, -0.2, 0.2, -0.165, -0.2, 0.2, -0.2,
    -0.2, -0.2, 0.2, -0.2, -0.2, -0.2, -0.2, -0.165, -0.2, -0.2, -0.165, 0.2,
    -0.2, 0.2, 0.2, -0.2, 0.165, 0.2, -0.2, 0.165, -0.2, -0.2, 0.2, -0.2,

    //right face
    0.2, -0.2, 0.2, 0.2, -0.2, 0.165, 0.2, 0.2, 0.165, 0.2, 0.2, 0.2,
    0.2, -0.2, -0.2, 0.2, -0.2, -0.165, 0.2, 0.2, -0.165, 0.2, 0.2, -0.2,
    0.2, -0.2, 0.2, 0.2, -0.2, -0.2, 0.2, -0.165, -0.2, 0.2, -0.165, 0.2,
    0.2, 0.2, 0.2, 0.2, 0.165, 0.2, 0.2, 0.165, -0.2, 0.2, 0.2, -0.2,
];

var baseBoxNormals = [
    //back face
    0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1,
    0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1,
    0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1,
    0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1,

    //front face
    0, 0, -1, 0, 0, -1, 0, 0, -1, 0, 0, -1,
    0, 0, -1, 0, 0, -1, 0, 0, -1, 0, 0, -1,
    0, 0, -1, 0, 0, -1, 0, 0, -1, 0, 0, -1,
    0, 0, -1, 0, 0, -1, 0, 0, -1, 0, 0, -1,

    //bottom face
    0, -1, 0, 0, -1, 0, 0, -1, 0, 0, -1, 0,
    0, -1, 0, 0, -1, 0, 0, -1, 0, 0, -1, 0,
    0, -1, 0, 0, -1, 0, 0, -1, 0, 0, -1, 0,
    0, -1, 0, 0, -1, 0, 0, -1, 0, 0, -1, 0,

    //top face
    0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0,
    0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0,
    0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0,
    0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0,


    //left face
    -1, 0, 0, -1, 0, 0, -1, 0, 0, -1, 0, 0,
    -1, 0, 0, -1, 0, 0, -1, 0, 0, -1, 0, 0,
    -1, 0, 0, -1, 0, 0, -1, 0, 0, -1, 0, 0,
    -1, 0, 0, -1, 0, 0, -1, 0, 0, -1, 0, 0,

    //right face
    1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0,
    1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0,
    1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0,
    1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0,
]

var trianglePrism = [
    // back-right face, shape: rectangle with 4 edges (4 edges represents a hollow with rectangle shape)
    // edge 1
    -0.8999999999999999, -0.2, -0.2, -0.49999999999999994, -0.2, -0.0, -0.49999999999999994, -0.18, -0.0, -0.8999999999999999, -0.18, -0.2,
    // edge 2
    -0.8999999999999999, 0.18, -0.2, -0.49999999999999994, 0.18, -0.0, -0.49999999999999994, 0.2, -0.0, -0.8999999999999999, 0.2, -0.2,
    // edge 3
    -0.8999999999999999, -0.2, -0.2, -0.8799999999999999, -0.2, -0.19, -0.8799999999999999, 0.2, -0.19, -0.8999999999999999, 0.2, -0.2,
    // edge 4
    -0.52, -0.2, -0.01, -0.49999999999999994, -0.2, -0.0, -0.49999999999999994, 0.2, -0.0, -0.52, 0.2, -0.01,

    // front face, shape: rectangle with 4 edges (4 edges represents a hollow with rectangle shape)
    // edge 1
    -0.8999999999999999, -0.2, 0.2, -0.49999999999999994, -0.2, 0.0, -0.49999999999999994, -0.18, 0.0, -0.8999999999999999, -0.18, 0.2,
    // edge 2
    -0.8999999999999999, 0.18, 0.2, -0.49999999999999994, 0.18, 0.0, -0.49999999999999994, 0.2, 0.0, -0.8999999999999999, 0.2, 0.2,
    // edge 3
    -0.8999999999999999, -0.2, 0.2, -0.8799999999999999, -0.2, 0.19, -0.8799999999999999, 0.2, 0.19, -0.8999999999999999, 0.2, 0.2,
    // edge 4
    -0.52, -0.2, 0.01, -0.49999999999999994, -0.2, 0.0, -0.49999999999999994, 0.2, 0.0, -0.52, 0.2, 0.01,

    // bottom, shape: triangle include 3D representation using 4 edges
    // edge 1
    -0.8999999999999999, -0.2, 0.2, -0.8799999999999999, -0.2, 0.19, -0.8799999999999999, -0.2, -0.19, -0.8999999999999999, -0.2, -0.2,
    // edge 2
    -0.52, -0.2, 0.0, -0.49999999999999994, -0.2, 0.0, -0.49999999999999994, -0.2, -0.0, -0.52, -0.2, -0.0,
    // edge 3
    -0.8999999999999999, -0.2, 0.2, -0.49999999999999994, -0.2, 0.0, -0.52, -0.2, -0.01, -0.8999999999999999, -0.2, 0.18,
    -0.8999999999999999, -0.2, -0.2, -0.49999999999999994, -0.2, -0.0, -0.52, -0.2, 0.01, -0.8999999999999999, -0.2, -0.18,

    // top, shape: triangle include 3D representation using 4 edges
    // edge 1
    -0.8999999999999999, 0.2, 0.2, -0.8799999999999999, 0.2, 0.19, -0.8799999999999999, 0.2, -0.19, -0.8999999999999999, 0.2, -0.2,
    // edge 2
    -0.52, 0.2, 0.0, -0.49999999999999994, 0.2, 0.0, -0.49999999999999994, 0.2, -0.0, -0.52, 0.2, -0.0,
    // edge 3
    -0.8999999999999999, 0.2, 0.2, -0.49999999999999994, 0.2, 0.0, -0.52, 0.2, -0.01, -0.8999999999999999, 0.2, 0.18,
    -0.8999999999999999, 0.2, -0.2, -0.49999999999999994, 0.2, -0.0, -0.52, 0.2, 0.01, -0.8999999999999999, 0.2, -0.18,

    // back-left face, shape: rectangle with 4 edges (4 edges represents a hollow with rectangle shape)
    // edge 1
    -0.8999999999999999, -0.2, 0.2, -0.8999999999999999, -0.2, 0.18, -0.8999999999999999, 0.2, 0.18, -0.8999999999999999, 0.2, 0.2,
    // edge 2
    -0.8999999999999999, -0.2, -0.2, -0.8999999999999999, -0.2, -0.18, -0.8999999999999999, 0.2, -0.18, -0.8999999999999999, 0.2, -0.2,
    // edge 3
    -0.8999999999999999, -0.2, 0.2, -0.8999999999999999, -0.2, -0.2, -0.8999999999999999, -0.18, -0.2, -0.8999999999999999, -0.18, 0.2,
    // edge 4
    -0.8999999999999999, 0.2, 0.2, -0.8999999999999999, 0.18, 0.2, -0.8999999999999999, 0.18, -0.2, -0.8999999999999999, 0.2, -0.2
]

var normalTrianglePrism = [
    // back-right face, shape: rectangle with 4 edges (4 edges represents a hollow with rectangle shape)
    0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1,
    0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1,
    0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1,
    0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1,

    // front face, shape: rectangle with 4 edges (4 edges represents a hollow with rectangle shape)
    0, 0, -1, 0, 0, -1, 0, 0, -1, 0, 0, -1,
    0, 0, -1, 0, 0, -1, 0, 0, -1, 0, 0, -1,
    0, 0, -1, 0, 0, -1, 0, 0, -1, 0, 0, -1,
    0, 0, -1, 0, 0, -1, 0, 0, -1, 0, 0, -1,

    // bottom, shape: triangle include 3D representation using 4 edges
    0, -1, 0, 0, -1, 0, 0, -1, 0, 0, -1, 0,
    0, -1, 0, 0, -1, 0, 0, -1, 0, 0, -1, 0,
    0, -1, 0, 0, -1, 0, 0, -1, 0, 0, -1, 0,
    0, -1, 0, 0, -1, 0, 0, -1, 0, 0, -1, 0,

    // top, shape: triangle include 3D representation using 4 edges
    0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0,
    0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0,
    0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0,
    0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0,

    // back-left face, shape: rectangle with 4 edges (4 edges represents a hollow with rectangle shape)
    -1, 0, 0, -1, 0, 0, -1, 0, 0, -1, 0, 0,
    -1, 0, 0, -1, 0, 0, -1, 0, 0, -1, 0, 0,
    -1, 0, 0, -1, 0, 0, -1, 0, 0, -1, 0, 0,
    -1, 0, 0, -1, 0, 0, -1, 0, 0, -1, 0, 0

]
// let centerTrianglePrism = getCenterPoint(trianglePrism)
// for (let i = 0; i < trianglePrism.length; i += 3) {
//     trianglePrism[i] -= centerTrianglePrism[0]
//     trianglePrism[i + 1] -= centerTrianglePrism[1]
//     trianglePrism[i + 2] -= centerTrianglePrism[2]
// }

boxedBoxVertices = []
for (var i = 0; i < baseBoxVertice.length; i++) {
    boxedBoxVertices.push(baseBoxVertice[i])
}
for (var i = 0; i < baseBoxVertice.length; i++) {
    boxedBoxVertices.push(baseBoxVertice[i] * 3 / 5)
}

boxedBoxNormals = []
for (var i = 0; i < baseBoxNormals.length * 2; i++) {
    boxedBoxNormals.push(baseBoxNormals[i % baseBoxNormals.length])
}

// let centerboxedBoxVertices = getCenterPoint(boxedBoxVertices)
// for (let i = 0; i < boxedBoxVertices.length; i += 3) {
//     boxedBoxVertices[i] -= centerboxedBoxVertices[0]
//     boxedBoxVertices[i + 1] -= centerboxedBoxVertices[1]
//     boxedBoxVertices[i + 2] -= centerboxedBoxVertices[2]
// }